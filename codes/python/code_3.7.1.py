# 入力
N = 5
H = [8, 6, 9, 2, 1]

# 動的計画法
# 足場の数の分だけ、配列を用意する。
dp = [None] * N

# 0番目の足場へ行く最小消費体力（元々0にいるため0）
dp[0] = 0

# 1番目以降の足場へ行く場合を考える
for i in range(1, N):

    # 1番目の足場へ行く場合は、0→1しかない
    if i == 1:
        # 絶対値の計算
        dp[i] = abs(H[i - 1] - H[i])
    # ２番目以降の足場に行く場合は、1個前と2個前の2パターンがある。
    if i >= 2:
        v1 = dp[i - 1] + abs(H[i - 1] - H[i])  # 1 個前の足場からジャンプするとき
        v2 = dp[i - 2] + abs(H[i - 2] - H[i])  # 2 個前の足場からジャンプするとき
        dp[i] = min(v1, v2)

# 答えの出力
print(dp[N - 1])
